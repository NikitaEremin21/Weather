from aiogram import types
from loader import dp
from aiogram.dispatcher import FSMContext
from services.weather_apy import get_weather_now
from config_data import config
from loguru import logger
import os
import states
from keyboards.reply.reply_keyboard_1 import weather_keyboard


async def format_weather_data(city, data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        now_temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        humidity = data['main']["humidity"]
        wind = data["wind"]["speed"]
        description = data["weather"][0]["description"]

        icon_id = data["weather"][0]["icon"][:2]
        path_icon = os.path.abspath(os.path.join(f'images/{icon_id}.png'))
        caption = (
            f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city} {description}\n\n'
            f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {"+" if now_temp > 0 else ""}{round(now_temp)} ¬∞C\n'
            f'ü§ó –û—â—É—â–∞–µ—Ç—Å—è: {"+" if feels_like > 0 else ""}{round(feels_like)} ¬∞C\n'
            f'üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n'
            f'üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {round(wind)} –º/—Å\n'
        )
        with open(path_icon, 'rb') as photo:
            return photo.read(), caption
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}')
        return None, None


@dp.message_handler(lambda message: message.text == '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å' or message.text == '/now')
async def weather_now_city_command(message: types.Message):
    await states.states.WeatherStates.city.set()
    await message.answer(text='–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É?')


@dp.message_handler(state=states.states.WeatherStates.city)
async def weather_now_command(message: types.Message, state: FSMContext):
    city = message.text
    lang = 'ru'
    api_key = config.RAPID_API_KEY

    success, data = await get_weather_now(city, lang, api_key)

    if not success:
        await message.answer(text=data, reply_markup=weather_keyboard)
        await state.finish()
        return

    photo, caption = await format_weather_data(city, data)

    if photo and caption:
        await message.answer_photo(photo=photo, caption=caption, reply_markup=weather_keyboard)
    else:
        await message.answer(text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}',
                             reply_markup=weather_keyboard)
    await state.finish()
