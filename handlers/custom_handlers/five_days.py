from aiogram import types
from loader import dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from config_data import config
from loguru import logger
import states
import requests
import json
from keyboards.reply.reply_keyboard_1 import rep_keyboard_1
from datetime import datetime
from collections import Counter


def weather_description_function(list_weather, i_day):
    """
        –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ
        –ø–æ–≥–æ–¥–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å–∞–¥–∫–æ–≤.
    """
    weather_description_dict = {
        '—è—Å–Ω–æ': '—è—Å–Ω–æ ‚òÄÔ∏è',
        '–¥–æ–∂–¥—å': '–¥–æ–∂–¥—å üåß',
        '–ø–∞—Å–º—É—Ä–Ω–æ': '–ø–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è',
        '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ ‚õÖÔ∏è',
        '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
        '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å'
    }
    if '–¥–æ–∂–¥—å' in list_weather or '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å' in list_weather or '–≥—Ä–æ–∑–∞' in list_weather:
        precipitation = '–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏'
    else:
        precipitation = '–û—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è'
    counter = Counter(list_weather)
    weather_description = counter.most_common(1)
    return weather_description_dict[weather_description[0][0]], precipitation


@dp.message_handler(lambda message: message.text == '–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π' or message.text == '/five_days')
async def five_days_city_command(message: types.Message):
    await states.states.WeatherStates.city_five_days.set()
    await message.answer(text='–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É?')


@dp.message_handler(state=states.states.WeatherStates.city_five_days)
async def five_days_command(message: types.Message, state: FSMContext):
    city = message.text
    lang = 'ru'
    date_now = datetime.now().date()
    api_key = config.RAPID_API_KEY
    req = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}'
                       f'&appid={api_key}&lang={lang}&units=metric')

    if req.status_code == 200:
        data = json.loads(req.text)
        daily_forecast = {}
        weather_list = {}
        message_text = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {city}:</b>\n"

        for i_day in data['list']:
            dt_txt = i_day['dt_txt']
            date = dt_txt.split()
            if date[0] not in weather_list:
                weather_list[date[0]] = [i_day['weather'][0]['description']]
            else:
                weather_list[date[0]].append(i_day['weather'][0]['description'])

            if date[0] != str(date_now):
                if date[0] not in daily_forecast:
                    daily_forecast[date[0]] = {
                        'temp_min': i_day['main']['temp_min'],
                        'temp_max': i_day['main']['temp_max']
                    }
                else:
                    daily_forecast[date[0]]['temp_min'] = min(daily_forecast[date[0]]['temp_min'],
                                                              i_day['main']['temp_min'])
                    daily_forecast[date[0]]['temp_max'] = max(daily_forecast[date[0]]['temp_max'],
                                                              i_day['main']['temp_max'])

        for i_date in daily_forecast:
            weather_description = weather_description_function(weather_list[i_date], i_date)

            date = datetime.strptime(i_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            message_text += (f'\n<b>{date}</b>\n'
                             f'–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ {weather_description[0]}\n'
                             f'{weather_description[1]}\n'
                             f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:  '
                             f'<b>{round(daily_forecast[i_date]["temp_min"])} - '
                             f'{round(daily_forecast[i_date]["temp_max"])} ¬∞C</b>\n')

        await message.answer(text=message_text,
                             parse_mode=types.ParseMode.HTML,
                             reply_markup=rep_keyboard_1)
    else:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {req.status_code}')
        await message.answer(text=f'–û—à–∏–±–∫–∞! –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥!',
                             reply_markup=rep_keyboard_1)

    await state.finish()
