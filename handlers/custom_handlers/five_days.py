from aiogram import types
from loader import dp
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from config_data import config
from loguru import logger
import states
import requests
import json
from keyboards.reply.reply_keyboard_1 import weather_keyboard
from datetime import datetime
from collections import Counter


async def get_weather_data(city, lang, api_key):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∏–∑ OpenWeather API.
    """
    url = (f'https://api.openweathermap.org/data/2.5/forecast?q={city}'
           f'&appid={api_key}&lang={lang}&units=metric')
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {e}')
        return None


async def group_weather_data(data, date_now):
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –ø–æ –¥–Ω—è–º
    """
    daily_forecast = {}
    weather_list = {}

    for i_day in data['list']:
        dt_txt = i_day['dt_txt']
        date = dt_txt.split()
        if date[0] not in weather_list:
            weather_list[date[0]] = [i_day['weather'][0]['description']]
        else:
            weather_list[date[0]].append(i_day['weather'][0]['description'])

        if date[0] != str(date_now):
            if date[0] not in daily_forecast:
                daily_forecast[date[0]] = {
                    'temp_min': i_day['main']['temp_min'],
                    'temp_max': i_day['main']['temp_max']
                }
            else:
                daily_forecast[date[0]]['temp_min'] = min(daily_forecast[date[0]]['temp_min'],
                                                          i_day['main']['temp_min'])
                daily_forecast[date[0]]['temp_max'] = max(daily_forecast[date[0]]['temp_max'],
                                                          i_day['main']['temp_max'])
    return daily_forecast, weather_list


async def get_message_text(city, daily_forecast, weather_list):
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        message_text = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤ –≥–æ—Ä–æ–¥–µ {city}:</b>\n"

        for i_date in daily_forecast:
            weather_description = weather_description_function(weather_list[i_date])

            date = datetime.strptime(i_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            message_text += (f'\n<b>{date}</b>\n'
                             f'–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ {weather_description[0]}\n'
                             f'{weather_description[1]}\n'
                             f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:  '
                             f'<b>{round(daily_forecast[i_date]["temp_min"])} - '
                             f'{round(daily_forecast[i_date]["temp_max"])} ¬∞C</b>\n')
        return message_text
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}')


def weather_description_function(list_weather):
    """
    –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ
    –ø–æ–≥–æ–¥–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å–∞–¥–∫–æ–≤.
    """
    weather_description_dict = {
        '—è—Å–Ω–æ': '—è—Å–Ω–æ ‚òÄÔ∏è',
        '–¥–æ–∂–¥—å': '–¥–æ–∂–¥—å üåßÔ∏è',
        '–ø–∞—Å–º—É—Ä–Ω–æ': '–ø–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è',
        '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ ‚õÖ',
        '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': '\n–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåßÔ∏è',
        '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚òÅÔ∏è',
        '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ',
        '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ ‚ùÑÔ∏è',
        '—Å–Ω–µ–≥': '—Å–Ω–µ–≥ ‚ùÑÔ∏è'
    }
    precipitation = '–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏' if any(word in list_weather for word in ['–¥–æ–∂–¥—å', '–≥—Ä–æ–∑–∞', '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å'])\
        else '–û—Å–∞–¥–∫–æ–≤ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è'
    counter = Counter(list_weather)
    weather_description = counter.most_common(1)
    return weather_description_dict[weather_description[0][0]], precipitation


@dp.message_handler(lambda message: message.text == '–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π' or message.text == '/five_days')
async def five_days_city_command(message: types.Message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    """
    await states.states.WeatherStates.city_five_days.set()
    await message.answer(text='–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≥–æ–¥—É?')


@dp.message_handler(state=states.states.WeatherStates.city_five_days)
async def five_days_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π
    """
    city = message.text.strip()
    lang = 'ru'
    date_now = datetime.now().date()
    api_key = config.RAPID_API_KEY

    if not city.replace(" ", "").isalpha():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)!")
        return

    await message.answer("–ò—â—É –¥–∞–Ω–Ω—ã–µ...")
    try:
        data = await get_weather_data(city, lang, api_key)
        if not data:
            raise ValueError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.')

        daily_forecast, weather_list = await group_weather_data(data, date_now)
        message_text = await get_message_text(city, daily_forecast, weather_list)
        if not message_text:
            raise ValueError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.')

        await message.answer(text=message_text,
                             parse_mode=types.ParseMode.HTML,
                             reply_markup=weather_keyboard)
    except ValueError as e:
        logger.error(e)
        await message.answer(text='–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö',
                             reply_markup=weather_keyboard)
    except Exception as e:
        logger.error(f'–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')
        await message.answer(text=f'–û—à–∏–±–∫–∞! –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥!',
                             reply_markup=weather_keyboard)
    await state.finish()
